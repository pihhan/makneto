Index: src/xmpp/xmpp-im/xmpp_message.h
===================================================================
--- src/xmpp/xmpp-im/xmpp_message.h	(revision 272)
+++ src/xmpp/xmpp-im/xmpp_message.h	(working copy)
@@ -136,6 +136,10 @@
 		void setSxe(const QDomElement&);
 		const QDomElement& sxe() const;
 
+		// JEP-xxxx Whiteboarding
+		void setWhiteboard(const QDomElement&);
+		const QDomElement& whiteboard() const;
+
 		// MUC
 		void addMUCStatus(int);
 		const QList<int>& getMUCStatuses() const;
Index: src/xmpp/xmpp-im/types.cpp
===================================================================
--- src/xmpp/xmpp-im/types.cpp	(revision 272)
+++ src/xmpp/xmpp-im/types.cpp	(working copy)
@@ -914,6 +914,7 @@
 	XData xdata;
 	QMap<QString,HTMLElement> htmlElements;
  	QDomElement sxe;
+ 	QDomElement wb;
 	
 	QList<int> mucStatuses;
 	QList<MUCInvite> mucInvites;
@@ -1380,6 +1381,16 @@
 	d->sxe = e;
 }
 
+const QDomElement& Message::whiteboard() const
+{
+	return d->wb;
+}
+
+void Message::setWhiteboard(const QDomElement& e)
+{
+	d->wb = e;
+}
+
 bool Message::spooled() const
 {
 	return d->spooled;
@@ -1566,6 +1577,11 @@
 		s.appendChild(d->sxe);
 	}
 
+	// wb
+	if(!d->wb.isNull()) {
+		s.appendChild(d->wb);
+	}
+
 	// muc
 	if(!d->mucInvites.isEmpty()) {
 		QDomElement e = s.createElement("http://jabber.org/protocol/muc#user","x");
@@ -1800,6 +1816,13 @@
 	else
 		d->sxe = QDomElement();
 
+	// wb
+	t = root.elementsByTagNameNS("http://jabber.org/protocol/svgwb", "wb").item(0).toElement();
+	if(!t.isNull())
+		d->wb = t;
+	else
+		d->wb = QDomElement();
+
 	t = childElementsByTagNameNS(root, "http://jabber.org/protocol/muc#user", "x").item(0).toElement();
 	if(!t.isNull()) {
 		for(QDomNode muc_n = t.firstChild(); !muc_n.isNull(); muc_n = muc_n.nextSibling()) {
